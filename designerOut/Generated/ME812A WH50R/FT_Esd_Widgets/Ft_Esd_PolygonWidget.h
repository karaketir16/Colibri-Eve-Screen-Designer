/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_PolygonWidget
Header
*/

#ifndef Ft_Esd_PolygonWidget__H
#define Ft_Esd_PolygonWidget__H

#include "Ft_Esd.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_PolygonWidget_CLASSID 0xA49A1FC4
ESD_SYMBOL(Ft_Esd_PolygonWidget_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_PolygonWidget, Include = "Ft_Esd_PolygonWidget.h", Callback, DisplayName = "ESD Polygon Widget", Category = EsdBasicWidegts, X = 202, Y = 105, Width = 250, Height = 250)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(x1, Type = int, Min = 0, Default = 125, Public)
	int x1;
	ESD_VARIABLE(y1, Type = int, Min = 0, Public)
	int y1;
	ESD_VARIABLE(x2, Type = int, Default = 230, Public)
	int x2;
	ESD_VARIABLE(y2, Type = int, Default = 250, Public)
	int y2;
	ESD_VARIABLE(x3, Type = int, Default = 125, Public)
	int x3;
	ESD_VARIABLE(y3, Type = int, Default = 180, Public)
	int y3;
	ESD_VARIABLE(x4, Type = int, Default = 20, Public)
	int x4;
	ESD_VARIABLE(y4, Type = int, Default = 250, Public)
	int y4;
	ESD_VARIABLE(x5, Type = int, Default = -1, Public)
	int x5;
	ESD_VARIABLE(y5, Type = int, Default = -1, Public)
	int y5;
	ESD_VARIABLE(x6, Type = int, Default = -1, Public)
	int x6;
	ESD_VARIABLE(y6, Type = int, Default = -1, Public)
	int y6;
	ESD_VARIABLE(x7, Type = int, Default = -1, Public)
	int x7;
	ESD_VARIABLE(y7, Type = int, Default = -1, Public)
	int y7;
	ESD_VARIABLE(x8, Type = int, Default = -1, Public)
	int x8;
	ESD_VARIABLE(y8, Type = int, Default = -1, Public)
	int y8;
	ESD_INPUT(Border_Width, Type = ft_uint8_t, Min = 0, Max = 255, SingleStep = 1, Default = 10)
	ft_uint8_t(* Border_Width)(void *context);
	ESD_INPUT(Border_Color, Type = ft_argb32_t, Default = #00007f)
	ft_argb32_t(* Border_Color)(void *context);
	ESD_INPUT(Fill_Color, Type = ft_argb32_t, Default = #ffff00)
	ft_argb32_t(* Fill_Color)(void *context);
} Ft_Esd_PolygonWidget;

void Ft_Esd_PolygonWidget__Initializer(Ft_Esd_PolygonWidget *context);

ESD_SLOT(Start)
void Ft_Esd_PolygonWidget_Start(Ft_Esd_PolygonWidget *context);

ESD_SLOT(Update)
void Ft_Esd_PolygonWidget_Update(Ft_Esd_PolygonWidget *context);

ESD_SLOT(Render)
void Ft_Esd_PolygonWidget_Render(Ft_Esd_PolygonWidget *context);

#endif /* Ft_Esd_PolygonWidget__H */

/* end of file */
